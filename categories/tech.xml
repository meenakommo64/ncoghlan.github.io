<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Curious Efficiency (tech)</title><link>http://www.curiousefficiency.org</link><description></description><language>en</language><lastBuildDate>Wed, 21 Jan 2015 01:45:09 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>DTCA Public Consultation - Brisbane</title><link>http://www.curiousefficiency.org/posts/2015/01/dtca-public-consultation.html</link><dc:creator>Nick Coghlan</dc:creator><description>&lt;div&gt;&lt;p&gt;Over the weekend, Asher Wolf
&lt;a href="https://twitter.com/Asher_Wolf/status/555909774596784129"&gt;alerted me&lt;/a&gt; (and
many others in the open source and cryptographic communities) to the
Australian Defence Trade Controls Act 2012, and the current public
consultation taking place around a bill proposing amendments to that act.&lt;/p&gt;
&lt;p&gt;Being heavily involved in improving the security of open source
infrastructure like the &lt;a href="https://pypi.python.org/"&gt;Python Package Index&lt;/a&gt;
and the
&lt;a href="https://www.python.org/dev/peps/pep-0466/"&gt;Python 2 reference interpreter&lt;/a&gt;,
working at a multinational open source vendor, and having an extensive
background in working under the constraints of the US International Traffic
in Arms regulations, Asher's concern caught my attention, since bad
legislation in this area can have significant chilling effects on legitimate
research and development activities.&lt;/p&gt;
&lt;p&gt;As a result, I've escalated this legislation for review by the legal teams
at various open source companies and organisations, with a view to making
formal submissions to the
&lt;a href="http://www.defence.gov.au/deco/Consultation.asp"&gt;public consultation process&lt;/a&gt;
that is open until January 30th (ready for bills to be submitted for
consideration to federal parliament on February 23rd).&lt;/p&gt;
&lt;p&gt;However, I was also able to attend the first public consultation session
held at the University of Queensland on January 19, so these are my
impressions based primarily on that sessions and my own experiences dealing
with ITAR. I'm not a lawyer and I haven't actually &lt;em&gt;read&lt;/em&gt; the legislation,
so I'm not going to pick up on any drafting errors, but I can at least speak
to the intent of the folks involved in moving this process forward.&lt;/p&gt;
&lt;h2&gt;What &lt;em&gt;not&lt;/em&gt; to worry about&lt;/h2&gt;
&lt;p&gt;To folks encountering this kind of legislation for the first time, the
sheer scope of the
&lt;a href="http://www.defence.gov.au/deco/DSGL.asp"&gt;Defence and Strategic Goods List&lt;/a&gt;
can seem absolutely terrifying. This was very clear to me from some of the
questions various academics in the room were asking.&lt;/p&gt;
&lt;p&gt;On this particular point, I can only say: &lt;em&gt;"Don't panic"&lt;/em&gt;. This isn't a
unique-to-Australia list, it's backed by a treaty called the
&lt;a href="http://www.wassenaar.org/"&gt;Wassenaar Arrangement&lt;/a&gt; - the DSGL represents
part of the implementation of that arrangement into Australian law.&lt;/p&gt;
&lt;p&gt;When the laws implementing that arrangement are well drafted, everyone outside
the military industrial complex (and certain easily weaponised areas of
scientific research) can pretty much ignore them, while everyone
inside the military industrial complex (and the affected areas of research)
pays very close attention to them because we like not being in jail (and
because gunrunning is bad, and bioterrorism is worse, mmm'kay?).&lt;/p&gt;
&lt;p&gt;A heavily regulated military supply chain is already scary enough, we &lt;em&gt;really&lt;/em&gt;
don't want to see the likely consequences of an unregulated one. (And if
you're tempted to make a snarky comment about the latter already being the
case, no, it really isn't. While folks can sometimes use overclassification
to avoid regulations they're supposed to be following, that still introduces
significant friction and inefficiencies into whatever they're doing. It's not
as good as people actually respecting the laws of the countries they're
supposedly defending, including genuinely meeting the requirement for
civilian authority over the military, but it's still a hell of a lot better
than nothing).&lt;/p&gt;
&lt;p&gt;Getting back on topic, the US ITAR and crypto export control laws are
currently considered the most strict implementation of the Wassenaar
Arrangement amongst the participating nations (going beyond the requirements
of the treaty in several areas), so if you see plenty of US nationals
participating in an activity without being fined and going to jail, you can
be fairly confident that it isn't actually a controlled activity under the
DSGL (or, even if it is, permits for that specific activity will be fairly
easy to get, and the most likely consequence of not realising you need a
permit for something you're doing will be someone from your government
getting in touch to point out that you should apply for one).&lt;/p&gt;
&lt;p&gt;There are certainly some very questionable aspects of this list (with the
perennial "favourite" being the fact the Wassenaar Arrangement does, in fact,
attempt to regulate the global trade in mathematics, which is just as stupid
and problematic as it sounds), but it's a known quantity, and one we're pretty
sure we can continue to live with (at least for the time being).&lt;/p&gt;
&lt;h2&gt;What to worry about&lt;/h2&gt;
&lt;p&gt;The real problem here is that the regulations included in the 2012 Act are
&lt;em&gt;not&lt;/em&gt; well drafted, and the legislated 2 year transition period from May 2013
through to May 2015 prior to the enforcement provisions kicking in is about
to run out.&lt;/p&gt;
&lt;p&gt;The biggest problem with the 2012 act is that in trying to keep things simple
(essentially, "if its on the DSGL, you need a permit"), it ended up becoming
extraordinarily draconian, requiring a permit for things that don't require
an export license even under ITAR.&lt;/p&gt;
&lt;p&gt;For the general public, the most significant shift in the 2015 amendment bill
is the fact that several cases around open publication of information related
to dual-use technologies shift to being allowed by default, and only in
exceptional cases would a permit be required (and in those cases, the onus
would be on the government to inform the covered individuals of that
requirement).&lt;/p&gt;
&lt;p&gt;The amendments also include a variety of additional exemptions for little
things like making it legal for Australian's own police and security agencies
to collaborate with their international counterparts. (Snarky comment
opportunity #2: in certain areas, making such collaboration illegal seems
like a potentially attractive idea...)&lt;/p&gt;
&lt;p&gt;That 2 year pilot was included in the original legislation as a safety
mechanism, the feedback from the associated steering group has been
extensive, and if things had gone according to plan, the relevant amendments
to the bill would have been passed last year in the spring sitting of federal
parliament, leaving DECO with at least 6 months to educate affected
organisations and individuals, and start issuing the now necessary permits
before the enforcement provisions became active in May. Unfortunately, we
currently have a federal government that views pushing a particular
ideological agenda as being more important than &lt;em&gt;actually doing their job&lt;/em&gt;,
so we're now faced with the prospect of regulations that industry doesn't
want, academia doesn't want, the Australian public service don't want, and
the Australian military don't want, coming into effect anyway.&lt;/p&gt;
&lt;p&gt;Isn't politics fun?&lt;/p&gt;
&lt;h2&gt;What DECO are (trying) to do about it&lt;/h2&gt;
&lt;p&gt;The group tasked with untangling this particular legislative Charlie Foxtrot
is the Australian Defence Export Control Office (DECO). Their proposal for
addressing the situation hinges on two bills that they plan to put before
the next sitting of federal parliament:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;an amendment bill for the Act itself, which fixes it to be a conventional
  implementation of the Wassenaar Arrangement, in line with existing
  implementations in other Wassenaar nations (why we didn't just do that in
  the first place is beyond me, but at least DECO are trying to fix the
  mistake now)&lt;/li&gt;
&lt;li&gt;a second bill to delay the enactment of the enforcement provisions for
  a further six months to provide sufficient time for DECO to properly
  educate affected parties and start issuing permits&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As far as I am aware, the second bill is needed primarily due to the
consideration of the first bill slipping by six months, since we're now
looking at the prospect of only having 4 weeks for DECO to start issuing
permits before the enforcement provisions come into effect. &lt;em&gt;Nobody&lt;/em&gt; involved
thinks that's a good idea.&lt;/p&gt;
&lt;p&gt;If both of those bills pass promptly, then the only cause for concern is
whether or not there are any remaining devils in the details of the
legislation itself. Member of the general public aren't going to be able to
pick those up - despite the surface similarities, legalese isn't English, and
reading it without interpreting it in the context of relevant case law can be
a good way to get yourself into trouble. Summary translations from legalese
to English by a competent lawyer are a much safer bet, although still not
perfect. (For the programmers reading this: I personally find it useful
to think of legalese as source code that runs on the language interpreter of
a given nation's legal system, while the English translations are the code
comments and documentation that anyone should be able to read if they
understand the general concepts involved).&lt;/p&gt;
&lt;p&gt;If at least the second bill passes, then we have another 6 months to work on
a better resolution to the problem.&lt;/p&gt;
&lt;p&gt;If &lt;em&gt;neither&lt;/em&gt; bill passes, then DECO end up in a bad situation where they'll
be required by law to implement and enforce regulations that they're
convinced are a bad idea. They actually have everything in place to do that
if they have to, but they don't want this outcome, and neither does anyone
else.&lt;/p&gt;
&lt;h2&gt;What industry and academia can do about it&lt;/h2&gt;
&lt;p&gt;While it's very short notice, the main thing industry and academia can do
is to file formal submissions with DECO as described in their overview of
the &lt;a href="http://www.defence.gov.au/deco/Consultation.asp"&gt;public consultation process&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are three main things to be addressed on that front:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ensuring federal parliament are aware of the importance of amending the
  Defence Trade Controls Act 2012 to eliminate the more draconian provisions&lt;/li&gt;
&lt;li&gt;ensuring federal parliament are aware of the infeasibility of putting this
  into effect on the original timeline and the need for a significant delay
  in the introduction of the enforcement provisions&lt;/li&gt;
&lt;li&gt;ensuring DECO are alerted to any remaining areas of concern in the
  specific drafting of the amended legislation (although I'd advise skipping
  this one if you're not a lawyer yourself - it's the functional equivalent
  of a lawyer with no training as a programmer proposing patches to the Linux
  kernel)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We were apparently asleep at the wheel when DTCA went through in 2012, so
we owe a &lt;em&gt;lot&lt;/em&gt; of thanks to whoever it was that advocated for and achieved
the inclusion of the two year transition and consultation period in the
original bill. Now we need to help ensure that our currently somewhat
dysfunctional federal parliament doesn't keep us from receiving the benefit
of that foresight.&lt;/p&gt;
&lt;h2&gt;What's definitely not going to happen&lt;/h2&gt;
&lt;p&gt;This consultation process is &lt;em&gt;not&lt;/em&gt; the place to rail against the details of
the Wassenaar Arrangement or Australia's participation in it. You won't
achieve anything except to waste the time of folks that currently have a
really serious problem to fix, and a very limited window in which to fix it.&lt;/p&gt;
&lt;p&gt;Yes, Wassenaar has some serious problems, especially around its handling
of cryptography and cryptographic research, but we have a fairly settled
approach to handling that at this point in history. The critical concern in
this current case is to help DECO ensure that the associated Australian
regulations can be readily handled through the mechanisms that have already
been put in place to handle existing Wassenaar enforcement regimes in other
countries. With the way the 2012 Act was drafted, that's almost certainly
currently not the case, but the proposed 2015 amendments &lt;em&gt;should&lt;/em&gt; fix it
(assuming the amendments actually have the effects that DECO has indicated
they're intended to).&lt;/p&gt;&lt;/div&gt;</description><category>politics</category><category>python</category><category>tech</category><guid>http://www.curiousefficiency.org/posts/2015/01/dtca-public-consultation.html</guid><pubDate>Tue, 20 Jan 2015 12:41:51 GMT</pubDate></item><item><title>Python Language Summit - PyCon US 2013</title><link>http://www.curiousefficiency.org/posts/2013/03/python-language-summit-pycon-us-2013.html</link><dc:creator>Nick Coghlan</dc:creator><description>&lt;div dir="ltr" style="text-align: left;"&gt;My notes from the PyCon US 2013 Python Language Summit &lt;a href="http://python-notes.curiousefficiency.org/en/latest/conferences/pyconus2013/20130313-language-summit.html"&gt;are up on ReadTheDocs.&lt;/a&gt;&lt;br&gt;&lt;br&gt;Courtesy of Vinay Sajip, I've also found out how to integrate DISQUS comments into my Python Notes pages, so feedback can happen directly over there :)&lt;/div&gt;</description><category>python</category><category>tech</category><guid>http://www.curiousefficiency.org/posts/2013/03/python-language-summit-pycon-us-2013.html</guid><pubDate>Thu, 14 Mar 2013 14:28:00 GMT</pubDate></item><item><title>Volunteer developed free-threaded cross platform virtual machines?</title><link>http://www.curiousefficiency.org/posts/2012/07/volunteer-supported-free-threaded-cross.html</link><dc:creator>Nick Coghlan</dc:creator><description>&lt;p&gt;Since writing my &lt;a href="http://python-notes.curiousefficiency.org/en/latest/python3/questions_and_answers.html"&gt;Python 3 Q &amp;amp; A&lt;/a&gt;, including &lt;a href="http://python-notes.curiousefficiency.org/en/latest/python3/questions_and_answers.html#but-but-surely-fixing-the-gil-is-more-important-than-fixing-unicode"&gt;some thoughts&lt;/a&gt; on why the CPython GIL isn't likely to go away any time soon, I've been pondering the question of free-threaded cross platform virtual machines for dynamic languages. Specifically, I've been trying to think of any examples of such that are driven almost entirely by volunteer based development.&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;h2&gt;  A brief VM survey &lt;/h2&gt;&lt;br&gt;The JVM and Dalvik have plenty of full time developers, and the CLR provided by Microsoft not only has full time developers, but also isn't cross platform.&lt;br&gt;Mono's core development was funded directly by first Ximian, then Novell and now Xamarin, and since the CLR is free-threaded, free-threading support would have been a requirement from the start.&lt;br&gt;&lt;br&gt;However, if we switch over to the dynamic language specific VM side, the reference implementations for both Python and Ruby use a Global Interpreter Lock to ease maintenance and maximise speed of execution in the original single-threaded scripting use case. This means neither can scale to multiple cores without using either multiple processes and some form of inter-process communications, or else invoking code that doesn't need to hold the interpreter lock (e.g. C extensions for CPython).&lt;br&gt;&lt;br&gt;Both Python and Ruby have JVM and CLR implementations that &lt;i&gt;are&lt;/i&gt; free-threaded (Jython, JRuby, IronPython, IronRuby), since they can take advantage of  the cross platform threading primitives in the underlying corporate sponsored VM.&lt;br&gt;&lt;br&gt;Rubinius, with Engine Yard's backing, is creating a free-threaded Ruby interpreter in the form of Rubinius 2.0. In my opinion, they've done something smart by avoiding the Win32 API entirely and just writing POSIX code, leaving the task of dealing with Microsoft's idiosyncratic approach to OS interfaces as a problem for the &lt;a href="http://mingw-w64.sourceforge.net/"&gt;MinGW developers&lt;/a&gt;. Unfortunately (from the point of view of this particular problem), CPython long ago adopted the approach of treating Windows as a first class native build target, rather than requiring the use of a third party POSIX compatibility layer.&lt;br&gt;&lt;br&gt;PyPy is heading in a different direction, focusing on making &lt;a href="http://pypy.org/tmdonate.html"&gt;Software Transactional Memory&lt;/a&gt; a viable approach to concurrency in Python, without the well-known data corruption and deadlock pitfalls of thread-based concurrency.&lt;br&gt;&lt;br&gt;Lua &lt;a href="http://lua-users.org/wiki/ThreadsTutorial"&gt;doesn't support&lt;/a&gt; native threading in the core VM at all - it just has a couple of GIL hooks that are no-ops by default, but can be overridden to implement a GIL.&lt;br&gt;&lt;br&gt;Perl 5 supports threads using the &lt;a href="http://perldoc.perl.org/threads.html"&gt;subinterpreter model&lt;/a&gt; - by default, all state is thread local and you have to take &lt;a href="http://perldoc.perl.org/threads/shared.html"&gt;explicit steps&lt;/a&gt; to make it visible to other threads. Perl also warns that using threads may lead to segfaults when using non-thread-safe modules.&lt;br&gt;&lt;br&gt;Parrot (and thus Perl 6) has a rather &lt;a href="http://docs.parrot.org/parrot/devel/html/docs/pdds/pdd25_concurrency.pod.html"&gt;ambitious concurrency model&lt;/a&gt;, but I have no idea how well it works in practice. With Perl 6 still in development, are there any documented production deployments?&lt;br&gt;&lt;br&gt;Javascript doesn't support full shared memory thread, only &lt;a href="https://developer.mozilla.org/en/Using_web_workers"&gt;Web Worker Threads&lt;/a&gt;. Since objects have to be serialised for inter-thread communication, the model is closer to lightweight processes than it is to shared memory threading.&lt;br&gt;&lt;h2&gt;  Whither CPython?&lt;br&gt;&lt;/h2&gt;&lt;br&gt;CPython doesn't have any full time developers assigned these days -  the PSF budget doesn't stretch that far (yet!), and the companies that  use Python (including PSF sponsor members) are generally (with a couple of notable exceptions) more interested  in paying people to build applications with the versions that exist now  rather than paying them directly to build better versions for use in  the future. That's not to say companies don't contribute code (we see  plenty of corporate contributions in the form of upstream patches from  Linux distro vendors like Red Hat and Canonical, as well as major users  like CCP Games, and companies have sponsored particular development  activities via the PSF, such as Dave Murray's work on email enhancements  that landed in 3.3), just that they don't tend to pay developers to  think about future directions for Python in general.&lt;br&gt;&lt;br&gt;&lt;br&gt;Even when the PythonLabs team (IIRC, Guido van Rossum, Tim  Peters, Barry Warsaw, Jeremy Hylton, Fred Drake, maybe some others) were  being funded by Digital Creations/Zope Corporation:&lt;br&gt;&lt;ul&gt;&lt;li&gt;it still wasn't full time for any of them&lt;/li&gt;&lt;li&gt;multi-core machines were still rare back then&lt;/li&gt;&lt;li&gt;DC/Zope is focused on web applications, which are far more likely to be IO bound than CPU bound&lt;/li&gt;&lt;/ul&gt;In more recent years, and this is the first of the exceptions I mentioned earlier, we had Google paying Guido to spend 20  hours a week guiding the development of Python 3, but that was all about  fixing the Unicode model rather than improving multi-core support.&lt;br&gt;&lt;br&gt;The other exception was the Google funded Unladen Swallow effort, which aimed to bring an LLVM based JIT to CPython. While that effort did result in many improvements to LLVM, and the creation of an excellent benchmark suite for long running Python processes (much of which is still used by PyPy to this day), it &lt;a href="http://qinsb.blogspot.com.au/2011/03/unladen-swallow-retrospective.html"&gt;ultimately failed&lt;/a&gt; in its original aim.&lt;br&gt;&lt;br&gt;&lt;h2&gt;  Formalising and enhancing subinterpreters&lt;/h2&gt;Given the high compatibility risks with existing threaded Python code and especially the risk of segfaults in C extensions that come with making CPython truly free-threaded, the Perl 5 subinterpreter model actually looks like the most promising way forward to me. With that approach, all code execution within a given interpreter is still serialised as normal, while a new communication mechanism would allow data to be safely passed between interpreters.&lt;br&gt;&lt;br&gt;Since it isn't exposed at the Python level, many developers don't realise that CPython already supports the use of &lt;a href="http://docs.python.org/c-api/init.html#sub-interpreter-support"&gt;subinterpreters&lt;/a&gt; to provide some degree of isolation between different pieces of code. The Apache &lt;a href="https://en.wikipedia.org/wiki/Mod_wsgi"&gt;mod_wsgi &lt;/a&gt;module uses this feature to provide some isolation between different WSGI applications running on the same Apache instance.&lt;br&gt;&lt;br&gt;Unfortunately, there are currently quite a few quirks and limitations with this feature, which is why it has never been elevated to a formal part of the language specification and exposed at the Python level. In addition, the GIL is part of the state that is still shared, so exposing the feature as it exists today wouldn't help at all with concurrency goals.&lt;br&gt;&lt;br&gt;That leads to my personal recommendation to anyone that would like to see better thread-based concurrency support in CPython:&lt;br&gt;&lt;ul&gt;&lt;li&gt;Create a CPython fork (either by importing directly from &lt;a href="http://hg.python.org/"&gt;http://hg.python.org/cpython&lt;/a&gt;, or by forking the &lt;a href="https://bitbucket.org/python_mirrors/cpython"&gt;BitBucket mirror&lt;/a&gt;).&lt;/li&gt;&lt;li&gt;Make the subinterpreter support compatible with the PyGilState APIs  (Graham Dumpleton and I will actually be discussing this aspect at  PyConAU next month, so I'd suggest talking to Graham before doing anything on this part)&lt;/li&gt;&lt;li&gt;Create a two-tiered locking scheme, where each interpreter (including the main interpreter) has a Subinterpreter Lock that is used to protect the main eval loop, while the Global Interpreter Lock remains in place to protect state that is shared between interpreters&lt;/li&gt;&lt;li&gt;Use the subinterpreter lock in preference to the GIL to protect most Python code evaluation&lt;/li&gt;&lt;li&gt;Design a mechanism for passing objects between interpreters without serialising or copying them. The CLR application domain design may provide some inspiration here.&lt;/li&gt;&lt;/ul&gt;This is by no means an easy project, but it's the one I see as having the greatest potential for allowing CPython to exploit multiple cores effectively without requiring serialisation of data. I'll also note that whatever mechanism is designed for that last bullet point may potentially translate to efficient communication between local processes via memory mapped files.&lt;br&gt;&lt;br&gt;But no, I'm not going to write it. Given what I work on (task automation and IO bound web and CLI applications), I don't need it personally or professionally, and it's too big a project to realistically attempt as a hobby/language PR exercise.&lt;br&gt;&lt;br&gt;If you're interested in funding efforts to make something like this happen for Python 3.4 (likely coming in early-mid 2014), but don't know how to go about finding developers to work on it, then it's worth getting in touch with the &lt;a href="http://python.org/psf/about/#how-do-i-reach-the-psf"&gt;PSF board&lt;/a&gt;. If you want better thread-based concurrency support in Python and are a Red Hat customer, it also wouldn't hurt to mention it via the appropriate channels :)&lt;br&gt;&lt;br&gt;Update: Added Javascript to the VM survey.</description><category>python</category><category>tech</category><guid>http://www.curiousefficiency.org/posts/2012/07/volunteer-supported-free-threaded-cross.html</guid><pubDate>Wed, 11 Jul 2012 02:58:00 GMT</pubDate></item><item><title>An embarrassment of riches</title><link>http://www.curiousefficiency.org/posts/2012/05/embarrassment-of-riches.html</link><dc:creator>Nick Coghlan</dc:creator><description>&lt;p&gt;Years ago (but still within the last decade) I was involved in a source control trade study for a large multi-national corporation. Management had let a non-software developer select the original "source control tool" and they had picked something that required custom scripting just to do a baseline (I wish I was kidding).&lt;br&gt;&lt;br&gt;So a bunch of candidate replacements were put forward for consideration, and CVS won because it was free, thus there would be fewer arguments with management about rolling it out on a project that was already over budget and behind schedule. (The fact that Subversion wasn't considered as a candidate should give you some additional hints about the precise timing of this - Subversion 1.0 was released in February 2004. Yes, for those that are new to this game, you read that right: it is only within the last decade that the majority of the open source VCS world began to enjoy the benefits of atomic commits).&lt;br&gt;&lt;br&gt;Other interesting aspects of that system included the fact that one of the developers on that project basically had to write a custom xUnit testing system from scratch in order to start putting together a decent automated test suite for the system, there was no code review tool, and you couldn't include direct links to bug tracker items in emails or anything else - you had to reference them by name or number, and people would then look those names or numbers up in the dedicated bug tracking application client.&lt;br&gt;&lt;br&gt;High level design documentation, if it existed at all, was in the form of Microsoft Word documents. Low level API documentation? Yes, that would have been nice (there were some attempts to generate something vaguely readable with Doxygen but, yeah, well, C++).&lt;br&gt;&lt;br&gt;Less than ten years later, though, and there are signs our industry is starting to grow up (although I expect many enterprise shops are still paying extortionate rates to the likes of IBM for the "Rational" suite of tools only to gain a significantly inferior development experience):&lt;br&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;You can get genuinely high quality code hosting for free. Sure &lt;a href="http://sourceforge.net/"&gt;Sourceforge&lt;/a&gt; was already around back then, but Git and Mercurial stomp all over CVS from a collaboration point of view. These also come with decent issue trackers and various other collaboration tools. If you don't want to trust a service provider with your code, than tools like &lt;a href="http://gitlabhq.com/"&gt;GitLab&lt;/a&gt; let you set up similar environments internally.&lt;/li&gt;&lt;li&gt;Web based issue trackers are everywhere, with the ubiquitous "issue URL" allowing effective cross-linking between tracker issues, documentation, code comments, source control browsers, code review systems, etc.&lt;/li&gt;&lt;li&gt;Dedicated code review tools like &lt;a href="https://code.google.com/p/gerrit/"&gt;Gerrit&lt;/a&gt; and &lt;a href="https://code.google.com/p/rietveld/"&gt;Reitveld&lt;/a&gt; are published as open source (and, in the case of the latter, even available as a free service on &lt;a href="http://codereview.appspot.com/"&gt;Google App Engine&lt;/a&gt;).&lt;/li&gt;&lt;li&gt;Services like &lt;a href="http://readthedocs.org/"&gt;ReadTheDocs&lt;/a&gt; exist, allowing you to easily build and publish high quality documentation. All with nice URLs so you can link it from emails, tracker issues, source code, etc.&lt;/li&gt;&lt;li&gt;Organisations like &lt;a href="https://www.shiningpanda.com/"&gt;Shining Panda CI&lt;/a&gt; and &lt;a href="http://travis-ci.org/"&gt;Travis CI&lt;/a&gt; provide hosted continuous integration services that put the internal capabilities of many large companies to shame.&lt;/li&gt;&lt;li&gt;Language communities provide cross-platform distribution services to reach a global audience.&lt;/li&gt;&lt;li&gt;Depending on the language you use, you may even have tools like &lt;a href="http://www.sonarsource.org/"&gt;SonarSource&lt;/a&gt; available&lt;/li&gt;&lt;li&gt;Once you go into production in the web application world, service components like &lt;a href="https://www.getsentry.com/welcome/"&gt;Sentry&lt;/a&gt;, &lt;a href="http://piwik.org/"&gt;Piwik&lt;/a&gt;, and &lt;a href="http://graphite.wikidot.com/faq"&gt;Graphite&lt;/a&gt; are again available for no charge.&lt;/li&gt;&lt;/ol&gt;And to access all this good stuff for free? All you have to do is be willing to share your work (and sometimes not even that). If you don't want to share your work, then the service providers generally have very reasonable fees - you could probably put together a state of the art suite of tools for less than a few hundred bucks a month.&lt;br&gt;&lt;br&gt;Take my own hobby projects as an example:&lt;br&gt;&lt;ul&gt;&lt;li&gt;they're hosted on &lt;a href="https://bitbucket.org/ncoghlan/"&gt;BitBucket&lt;/a&gt; as Mercurial projects (I happen to prefer Mercurial, although I can definitely see why people like Git, too). That gives me integrated issue tracking and online source code browsing, too. (OK, so I could have had essentially that back in the early SourceForge days, but the UI aspects have improved in many respects in the intervening years)&lt;/li&gt;&lt;li&gt;I can publish my projects on the &lt;a href="http://pypi.python.org/"&gt;Python Package Index&lt;/a&gt; with a simple "&lt;span&gt;setup.py sdist upload&lt;/span&gt;". They're then available for anyone in the world to install with a straightforward command like "&lt;span&gt;pip install walkdir&lt;/span&gt;"&lt;/li&gt;&lt;li&gt;thanks to &lt;a href="https://jenkins.shiningpanda.com/ncoghlan-devs-projects/"&gt;Shining Panda CI&lt;/a&gt;, I know the downloads from PyPI work, and I also know that the projects work on all the versions and implementations of Python I want to support&lt;/li&gt;&lt;li&gt;thanks to &lt;a href="http://readthedocs.org/profiles/ncoghlan/"&gt;ReadTheDocs&lt;/a&gt; and &lt;a href="http://sphinx.pocoo.org/"&gt;Sphinx&lt;/a&gt;, you can read nicely formatted documentation like &lt;a href="http://walkdir.readthedocs.org/"&gt;this&lt;/a&gt; rather than trying to decipher plain text files or wiki pages.&lt;/li&gt;&lt;/ul&gt;I'm living in the future and it is seriously &lt;i&gt;cool&lt;/i&gt; (and that's just looking at things purely from a software development infrastructure point of view - the rise of "Infrastructure as a Service" and "Platform as a Service" providers, including Red Hat's own &lt;a href="https://openshift.redhat.com/"&gt;OpenShift&lt;/a&gt;, has massive implications on the deployment side of things, and there's of course the implications of the many open source wheels that don't need to be reinvented)&lt;br&gt;&lt;br&gt;The best part from my point of view is that these days I get to work for a &lt;a href="http://www.redhat.com/"&gt;company&lt;/a&gt; that already genuinely understands the long term significance of the power of collaborative development. It also doesn't hurt that there's still a lot of money to be made in helping the rest of the enterprise world come to grips with that reality :)</description><category>intarwebs</category><category>python</category><category>tech</category><guid>http://www.curiousefficiency.org/posts/2012/05/embarrassment-of-riches.html</guid><pubDate>Tue, 22 May 2012 14:55:00 GMT</pubDate></item><item><title>Using the SOPA protests to highlight related problems in Australia</title><link>http://www.curiousefficiency.org/posts/2012/01/using-sopa-protests-to-highlight.html</link><dc:creator>Nick Coghlan</dc:creator><description>&lt;p&gt;I  figure this is the easiest place to publish the message I just sent to  Larissa Waters, the Greens Senator that is one of Queensland's  representatives in the Federal Senate. I also wrote to Yvette D'ath (our  local MHR) a few days ago, but I didn't keep a copy of that one. Will  this achieve anything? Probably not, but hey, at least I tried (and if  none of their constituents ever write to them about it, our reps are  quite entitled to assume we're all OK with them selling out the county  to legacy US media interests): &lt;br&gt;&lt;/p&gt;&lt;blockquote class="tr_bq"&gt;&lt;i&gt;Senator Waters,&lt;br&gt;&lt;br&gt;With  today being the day Wikipedia and a wide range of other sites have  either gone dark or taken other action to protest draconian internet  censorship legislation making its way through the US Congress, it seems  an opportune time to highlight our own government's ongoing concerning  behaviour on that front.&lt;br&gt;&lt;br&gt;Of particular concern is their &lt;a href="http://delimiter.com.au/2012/01/17/govt-censors-secret-anti-piracy-meeting-notes/"&gt;continuing refusal&lt;/a&gt; to release details of a secretive meeting between government  representatives and representatives of the same organisations that are  behind the draconian US bills currently being protested. The government  even &lt;a href="http://delimiter.com.au/2011/12/23/secret-piracy-talks-govt-banned-consumer-groups/"&gt;deliberately excluded&lt;/a&gt; representatives of a number of community interest organisations that sought to attend these discussions.&lt;br&gt;&lt;br&gt;These  legacy media companies (aka horse drawn carriage manufacturers) are  flailing around wildly as the rise of free and open digital  communications networks (aka automobiles) threatens the cherished  gatekeeper role they have enjoyed for the past few decades as media  distributors. They have failed to adapt, and are increasingly being  bypassed as artists, writers, musicians, comedians and other media  creators find ways to use the power of the internet to connect more  directly with their fans. These direct connections are great for both  artists and fans, but place the intermediaries like YouTube, Apple  iTunes, Amazon, BandCamp, Flickr, etc, in the role of service providers  to the artists and fans rather than gatekeepers to widespread  distribution. Unfortunately, instead of going gracefully into that good  night, these organisations are investing inordinate sums of money  worldwide in lobbying for legislation that would make the permissive,  open practices of most of these new service providers a recipe for  prohibitively high legal liabilities, effectively making those practices  unsustainable and thus breaking the internet as we know it today.&lt;br&gt;&lt;br&gt;Australia  already markedly shifted many intellectual monopoly policies to favour  the interests of US copyright holders at the expense of Australian  citizens when we signed the US-FTA some time ago. We have also  participated in the secretive process of drafting the  Anti-Counterfeiting Trade Agreement, which spends far more time  considering digital copyright infringement than it does actual  counterfeiting. The current negotiations over membership in the  Trans-Pacific Partnership agreement raise legitimate fears that  Australia's intellectual monopoly policy will be shifted even further  towards the draconian position of the United State Trade Representative,  even as those policies are being protested strongly within the US  itself.&lt;br&gt;&lt;br&gt;In line with your &lt;a href="http://greens.org.au/policies/human-rights-democracy/community-participation-in-government"&gt;published policy&lt;/a&gt; on community participation in government, do the Greens plan to  publicly question the government over their apparent willingness to  place the interest of large US companies ahead of those of individual  Australian citizens?&lt;br&gt;&lt;br&gt;Regards,&lt;br&gt;Nick.&lt;/i&gt;&lt;/blockquote&gt;&lt;br&gt;</description><category>intarwebs</category><category>politics</category><category>tech</category><guid>http://www.curiousefficiency.org/posts/2012/01/using-sopa-protests-to-highlight.html</guid><pubDate>Wed, 18 Jan 2012 09:47:00 GMT</pubDate></item><item><title>Switching to Android</title><link>http://www.curiousefficiency.org/posts/2011/06/switching-to-android.html</link><dc:creator>Nick Coghlan</dc:creator><description>&lt;p&gt;So my new HTC Desire S arrived today which means it is time for an app downloading spree... (starting with just freebies for now while I figure out what I do and don't like, and delete some of the cruft that HTC/Telstra added)&lt;br&gt;&lt;br&gt;Already grabbed:&lt;br&gt;Google Goggles&lt;br&gt;Google Sky&lt;br&gt;Google Reader&lt;br&gt;Dropbox&lt;br&gt;Firefox&lt;br&gt;KeepassDroid&lt;br&gt;OI File Manager&lt;br&gt;Shelves for Android (now actually *scanning* my book collection will be quite a project...)&lt;br&gt;Barcode Scanner&lt;br&gt;Compass&lt;br&gt;&lt;br&gt;And a ton of standard apps from Google/HTC/Telstra for all the basics (Phone, SMS, Music, Mail/Gmail, FB, Twitter, Camera, Calendar, Clock, Weather, Calculator, Adobe PDF Reader, Maps/Navigation, LED Flashlight, etc).&lt;br&gt;&lt;br&gt;Things I know I want but don't have yet:&lt;br&gt;&lt;br&gt;Ebook reader (I used Stanza from Lexcycle on the iPhone, but they don't make an Android version)&lt;br&gt;Weight tracker (don't need anything fancy, just something that I can import old data into and will give me a time-weighted average)&lt;br&gt;&lt;br&gt;I'm also open to suggestions for things I might want but just don't know it yet, and of course I'll have to track down a few idle time games.&lt;/p&gt;</description><category>tech</category><guid>http://www.curiousefficiency.org/posts/2011/06/switching-to-android.html</guid><pubDate>Wed, 15 Jun 2011 14:33:00 GMT</pubDate></item></channel></rss>